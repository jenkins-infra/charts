clusterAdminEnabled: true
jenkins:
    agent:
        componentName: "agent"
    networkPolicy:
        internalAgents:
            allowed: true
            namespaceLabels:
              name: "jenkins-infra"
    master:
        JCasC:
            enabled: true
            defaultConfig: false
            configScripts:
              credentials : |
                credentials:
                  system:
                    domainCredentials:
                      - credentials:
                        - usernamePassword:
                            description: "GitHub access token for jenkinsadmin"
                            id: "github-access-token"
                            username: "${GITHUB_USERNAME}"
                            password: "${GITHUB_PASSWORD}"
                            scope: GLOBAL
                        - string:
                            scope: GLOBAL
                            id: "updatecli-github-token"
                            secret: '${UPDATECLI_GITHUB_TOKEN}'
                            description: Github Token used by updatecli to update version
                        - string:
                            scope: GLOBAL
                            id: "sops-client-id"
                            secret: "${SOPS_CLIENT_ID}"
                            description: Azure client ID used by sops to decrypt secrets
                        - string:
                            scope: GLOBAL
                            id: "sops-client-secret"
                            secret: "${SOPS_CLIENT_SECRET}"
                            description: Azure client secret used by sops to decrypt secrets
                        - string:
                            scope: GLOBAL
                            id: "PLUGINSITE_STORAGEACCOUNTKEY"
                            secret: "${PLUGINSITE_STORAGEACCOUNTKEY}"
                            description: Azure storage account key for plugin site
                        - string:
                            scope: GLOBAL
                            id: "sops-tenant-id"
                            secret: "${SOPS_TENANT_ID}"
                            description: Azure tenant id used by sops to decrypt secrets
                        - basicSSHUserPrivateKey:
                            scope: GLOBAL
                            id: "charts-secrets"
                            username: ${SSH_CHARTS_SECRETS_USERNAME}
                            #passphrase: ${SSH_CHARTS_SECRETS_PASSWORD}
                            description: "SSH privkey used to access jenkins-infra/charts-secrets"
                            privateKeySource:
                              directEntry:
                                privateKey: ${SSH_CHARTS_SECRETS_PRIVKEY}
                        - file:
                            scope: GLOBAL
                            id: jenkins-dockerhub
                            fileName: config.json
                            secretBytes: ${base64:DOCKER_CONFIG}
              k8s-settings: |
                jenkins:
                  clouds:
                    - kubernetes:
                        containerCapStr: "100"
                        jenkinsTunnel: "jenkins-infra-agent:50000"
                        jenkinsUrl: "http://jenkins-infra:8080"
                        maxRequestsPerHostStr: "300"
                        name: "kubernetes"
                        namespace: "jenkins-infra"
                        podRetention: "Never"
                        serverUrl: "https://kubernetes.default"
                        podLabels:
                          # Required to be jenkins/<helm-release>-jenkins-slave as definede here
                          # https://github.com/helm/charts/blob/ef0d749132ecfa61b2ea47ccacafeaf5cf1d3d77/stable/jenkins/templates/jenkins-master-networkpolicy.yaml#L27
                          - key: "jenkins/jenkins-infra-agent"
                            value: "true"
                        templates:
                          - name: jnlp-linux
                            nodeSelector: "kubernetes.io/os=linux"
                            containers:
                              - name: jnlp
                                image: "jenkins/inbound-agent:latest-jdk11"
                                resourceLimitCpu: "500m"
                                resourceLimitMemory: "512Mi"
                                resourceRequestCpu: "500m"
                                resourceRequestMemory: "512Mi"
                                args: "^${computer.jnlpmac} ^${computer.name}"
                                alwaysPullImage: true
                          - name: jnlp-windows
                            nodeSelector: "kubernetes.io/os=windows"
                            containers:
                              - name: jnlp
                                image: "jenkins4eval/jnlp-agent:latest-windows"
                                resourceLimitCpu: "500m"
                                resourceLimitMemory: "512Mi"
                                resourceRequestCpu: "500m"
                                resourceRequestMemory: "512Mi"
                                args: "^${computer.jnlpmac} ^${computer.name}"
                                alwaysPullImage: true
                            yaml: |-
                              spec:
                                tolerations:
                                - key: "os"
                                  operator: "Equal"
                                  value: "windows"
                                  effect: "NoSchedule"
              jobs-settings: |
                jobs:
                  - script: >
                      multibranchPipelineJob('k8smgmt') {
                        displayName "K8s Cluster Management"
                        description "Current K8s Cluster Management"
                        branchSources {
                          github {
                            id('2019081602')
                            scanCredentialsId('github-access-token')
                            repoOwner('jenkins-infra')
                            repository('charts')
                            includes('master')
                          }
                        }
                        factory {
                          workflowBranchProjectFactory {
                            scriptPath('Jenkinsfile_k8s')
                          }
                        }
                      }
                  - script: >
                      multibranchPipelineJob('pluginsite') {
                        displayName "Plugin Site"
                        branchSources {
                          github {
                            includes('master')
                          }
                        }
                        factory {
                          workflowBranchProjectFactory {
                            scriptPath('Jenkinsfile_k8s')
                          }
                        }
                      }
                  - script: >
                      multibranchPipelineJob('jenkins-wiki-exporter') {
                        displayName "Wiki Exporter"
                        branchSources {
                          branchSource {
                            source {
                              github {
                                id('2019081603')
                                scanCredentialsId('github-access-token')
                                repoOwner('jenkins-infra')
                                repository('plugin-site')
                                includes('master')
                                traits {
                                  pruneStaleBranchTrait()
                                  gitHubTagDiscovery()
                                }
                              }
                              buildStrategies {
                                buildAnyBranches {
                                  strategies {
                                    buildAllBranches {
                                      strategies {
                                        buildRegularBranches()
                                      }
                                    }
                                  }
                                }
                                buildAnyBranches {
                                  strategies {
                                    buildAllBranches {
                                      strategies {
                                        buildTags {
                                          atLeastDays '-1'
                                          atMostDays '3'
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        factory {
                          workflowBranchProjectFactory {
                            scriptPath('Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      multibranchPipelineJob('custom-distribution-service') {
                        displayName "Custom Distribution Service"
                        branchSources {
                          branchSource {
                            source {
                              github {
                                id('2019081603')
                                scanCredentialsId('github-access-token')
                                repoOwner('jenkinsci')
                                repository('custom-distribution-service')
                                includes('master')
                                traits {
                                  pruneStaleBranchTrait()
                                  gitHubTagDiscovery()
                                }
                              }
                              buildStrategies {
                                buildAnyBranches {
                                  strategies {
                                    buildAllBranches {
                                      strategies {
                                        buildRegularBranches()
                                      }
                                    }
                                  }
                                }
                                buildAnyBranches {
                                  strategies {
                                    buildAllBranches {
                                      strategies {
                                        buildTags {
                                          atLeastDays '-1'
                                          atMostDays '3'
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        factory {
                          workflowBranchProjectFactory {
                            scriptPath('Jenkinsfile')
                          }
                        }
                      }
              ldap-settings: |
                jenkins:
                  securityRealm:
                    ldap:
                      configurations:
                        - server: "${LDAP_SERVER}"
                          rootDN: "${LDAP_ROOT_DN}"
                          managerDN: "${LDAP_MANAGER_DN}"
                          managerPasswordSecret: "${LDAP_MANAGER_PASSWORD}"
                          userSearch: cn={0}
                      cache:
                        size: 100
                        ttl: 300
              pipeline-library: |
                unclassified:
                  globalLibraries:
                    libraries:
                    - defaultVersion: "master"
                      implicit: true
                      name: "pipeline-library"
                      retriever:
                        modernSCM:
                          scm:
                            git:
                              id: "github-access-token"
                              remote: "https://github.com/jenkins-infra/pipeline-library.git"
              matrix-settings: |
                jenkins:
                  authorizationStrategy:
                    globalMatrix:
                      grantedPermissions:
                        - "Overall/Administer:admins"
                        - "Overall/SystemRead:all"
                        - "Overall/Read:all"
                        - "Job/Read:all"
                        - "Job/Build:all"
        ingress:
          enabled: true
          hostName: infra.ci.jenkins.io
          annotations:
            "cert-manager.io/cluster-issuer": "letsencrypt-prod"
            "kubernetes.io/ingress.class": "nginx"
            "nginx.ingress.kubernetes.io/proxy-body-size": "500m"
          tls:
            - hosts:
                - infra.ci.jenkins.io
              secretName: infra.ci.jenkins.io-cert
